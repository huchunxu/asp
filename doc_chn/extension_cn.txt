
		TOPPERS/ASP 内核
		机能扩展与调整指南

		版本: Release 1.7.0
		最后更新: 2010年11月20日

本文档为如何对TOPPERS/ASP内核进行机能扩展和调整的相关说明.由华中科技大
学瑞萨高级嵌入式控制器实验室组织翻译制作,主要参与人:任慰,王彦明,方华启,
汪卓

----------------------------------------------------------------------
TOPPERS/ASP Kernel
     Toyohashi Open Platform for Embedded Real-Time Systems/
     Advanced Standard Profile Kernel

 Copyright (C) 2005-2011 by Embedded and Real-Time Systems Laboratory
             Graduate School of Information Science, Nagoya Univ., JAPAN
 
对于以上著作权,用户只要符合以下的(1)－(4)条件,或者符合Free Software
Foundation机构公布 的GNU General Public License第2版中记述的条件,著作权
所有者将无偿同意本软件(含本软件修正品,以下同)的使用,复制,修改及再分发(
以下统称为使用).

(1).以源代码形式使用本软件时,须原封不动地把著作权申明,使用条件及以下的无
	保障规定放入源代码中.

(2).以程序库等能被其它软件调用的形式再分发时,须在再分发说明书(使用说明等
	)中,写入 上述的著作权申明,使用条件及以下的无保障规定.

(3).把本软件嵌入机器等,以不能被其它软件调用的形式使用本软件时,须满足以下
	条件中的一条.
	(a).再分发时使用书(使用说明等)中,须写入上述著作权申明,使用条件及以下
	的无保障规定.
	(b).以其它形式再分发本软件时,须向TOPPERS协会报告. 

(4).因使用本软件而引起的直接或间接的损失,均不得向上述著作权所有者及
	TOPPERS协会要求承担责任.

本软件以无保障方式提供给社会.上述著作权所有者及TOPPERS协会对本软件及能
否使用本软件的 探讨均不负任何责任.同时,对因使用上述软件而引起的直接或间
接的损失,均不负任何责任.
 
 $Id: extension.txt 1964 2010-11-20 06:41:44Z ertl-hiro $
----------------------------------------------------------------------

@ 目录

# 检错的忽略
# 系统时钟周期的变更
# 特殊寄存器的处理
# 扩展包的使用方法
	- 互斥机能扩展包
	- 任务运行超时处理函数机能扩展包
	- 任务优先级扩展扩展包
	- 受限任务扩展包
	- 动态创建机能扩展包
# CPU异常处理函数的直接调用
	- TA_DIRECT属性的导入
	- 目标依赖部分的修正处


@ 检错的忽略

为了减少服务调用的系统开销,有时会希望跳过一些静态检错.由于ASP内核中所有
的静态检错都是用CHECK宏进行的,所以可以通过更改kernel/check.h中的CHECK宏
来跳过静态检错.

例如,如果想要跳过任务ID的检错则将CHECK_TSKID宏和CHECK_TSKID_SELF宏作如下
更改即可.

#define CHECK_TSKID(tskid)			((void)(tskid))
#define CHECK_TSKID_SELF(tskid)		((void)(tskid))

上述宏也可以定义为空,但考虑到宏的参数可能带来的副作用(有可能执行作为宏参
数的相关表达式),上述宏定义更加安全.不过只要没有副作用即使按照上述方法来
定义,在优化时上述宏定义也会被优化掉,不会影响执行效率.但如果这些宏定以无
法被优化掉时,必须先确保作为宏参数的表达式不会带来副作用,上述宏定义才能定
义为空.

@ 系统时钟周期的变更

在默认情况下ASP内核的系统时钟周期为1毫秒,但对于低速的处理器而言,每隔1毫
秒进行一次中断处理所带来的开销可能是个问题.如果应用所要求的时间精度不需
要太高时,可以适当延长系统时钟的周期,从而降低处理器的负担.

系统时钟周期的设置是目标依赖的,是否能更改系统时钟周期取决于目标依赖部分
的系统时钟驱动的实现.默认的情况下,更改target_kernel.h(或其下所包含的文件
)中所定义的宏TIC_NUME和TIC_DENO,就可更改系统时钟周期.


@ 特殊寄存器的处理

对于拥有FPU寄存器或DSP寄存器等特殊目的用寄存器(以下简称特殊寄存器)的处理
器 ,处理特殊寄存器时主要考虑以下三方面.

(1) 不将特殊寄存器包含在任务上下文中

如果特殊寄存器只被一个任务所使用,则没有必要将该特殊寄存器包含在任务上下
文中.

(2) 将特殊寄存器包含在任务上下文中

如果多个任务都使用到了特殊寄存器,最简单的方法无非是将特殊寄存器包含在任
务上下文中.如果这样做就必须在任务调度器和中断处理函数/CPU异常处理函数的
出入口处理中添加保存和恢复特殊寄存器内容的代码.暂存寄存器和其他寄存器在
保存/恢复的场所上有所不同,实现时请加以注意.

(3) 是否将特殊寄存器包含在任务上下文中由任务而定

如果存在使用特殊寄存器的任务和未使用特殊寄存器的任务,将特殊寄存器包含在
所有任务的上下文内,相应的开销将是一个问题,因此是否将特殊寄存器包含在任
务上下文由任务而定是比较合适的.相应的实现方法如下.

首先给任务追加一个任务属性,用于判别其是否需要将特殊寄存器包含在任务上下
文中.例如对于FPU寄存器,则可以追加任务属性TA_FPU,调度器便可以根据该属性
来判断是否将FPU寄存器进行保存和恢复.

如果可以通过硬件除能特殊寄存器,那么在对未使用到特殊寄存器的任务进行切换
时除能特殊寄存器,使得系统可以检出该任务对特殊寄存器的误访问.

另外当中断处理函数(包括ISR,周期定时器处理函数,单次定时器处理函数)和CPU
异常处理函数使用到了特殊寄存器时,也可以对这些处理单位追加相应的属性.

任务(或者其他处理单位)是否使用特殊寄存器也可能依赖于编译器或者函数库等,
这点需要注意.例如,没有浮点运算的程序,编译器为了提高性能,可能会生成浮点运
算指令.

@ 扩展包的使用方法

ASP内核支持若干扩展机能,对应的也实现了若干个扩展包,这些扩展包在extension
目录下.

以UNIX系统为例,如果要使用扩展包,则须在ASP内核源文件的根目录下执行下述命
令.

	% cp -r extension/<扩展包目录名>/* .

但是这样一来扩展前的源文件会被部分覆盖,所以如果还要用到扩展前的内核的话
请在 别的目录下展开源文件,并执行上述命令.

虽然一般不考虑多个扩展包同时使用,但在非下述情况下,可以手工将多个扩展包合
并使用.现阶段无法合并使用的扩展包为互斥机能扩展包和受限任务扩展包.同时现
阶段也不能讲动态创建机能扩展包和其他扩展包的合并使用.

* 互斥机能扩展包

互斥机能扩展包追加了互斥量机能,仅支持优先级置顶协议(TA_CEILING属性的互斥
量)而不支持优先级继承协议(TA_INHERIT属性的互斥量).互斥机能扩展包位于
extension/mutex目录下.

可以通过互斥机能扩展包下的kernel.h中的TOPPERS_SUPPORT_MUTEX来判别互斥机
能是否可用.

* 任务运行超时处理函数机能扩展包

任务运行超时处理函数扩展包,为内核追加了任务运行超时处理函数机能.但是该机
能需要目标依赖部分 的支持.任务运行超时处理函数机能扩展包位于
extension/ovrhdr目录下.

如果目标依赖部分支持该扩展包的话,在任务运行超时处理函数机能扩展包下的
kernel.h中h会定义TOPPERS_SUPPORT_OVRHDR,用户可以据此判别是否能使用任务运
行超时处理函数机能.

* 任务优先级扩展扩展包

任务优先级扩展扩展包可以把任务优先级的级数扩展到256级,不仅是任务优先级,
数据优先级,消息优先级以及中断服务例程的优先级都可以用该扩展包把优先级的
级数扩展到256级.任务优先级扩展扩展包位于extension/pri_level目录下.

任务优先级扩展扩展包的kernel.h中定义了宏TOPPERS_SUPPORT_PRI_LEVEL.用户可
以据此判断优先级是否被扩展.

* 受限任务扩展包

受限任务扩展包不仅遵循TOPPERS新一代内核规范实现了受限任务机能,还实 现了
变更当前任务初始优先级的服务调用ras_pri.受限任务扩展包位于
extension/rstr_task目录下.

受限任务扩展包下的kernel.h中定义了宏TOPPERS_SUPPORT_RSTR_TASK,用户可以通
过据此判断受限任务机能是否可用.

----------------------------------------------------------------------
ras_pri		提升当前任务的初始优先级(T)

[C语言API]
	ER ercd = ras_pri(PRI tskpri)

[参数]
	PRI			tskpri		初始优先级

[返回值]
	ER			ercd		正常结束(E_OK)或者错误码

[错误码]
	E_CTX			上下文错误(非任务上下文环境下或者CPU锁定状态下调用
					ras_pri)
	E_PAR			参数错误(tskpri不正确)
	E_ILUSE			服务调用使用方法不正确(tskpri的值比当前任务的初始优
					先级更低)

[机能]

变更当前任务的初始优先级为tskpri,具体如下.

当前任务的优先级变更为tskpri指定的优先级后,相应地,当前任务的当前优先级
也会发生变更.在相同优先级的任务中,当前任务的优先顺位最高.

当tskpri的值为TPRI_INI(=0)时,当前任务的初始优先级将被置为启动时的优先级
.

tskpri必须为TPRI_INI或者是大于等于TMIN_TPRI小于等于TMAX_TPRI的某个值,并
且tskpri必须大于等于当前任务启动时的优先级.
----------------------------------------------------------------------

* 动态创建机能扩展包

动态创建机能扩展包追加了动态创建对象机能.该扩展包按照TOPPERS新一代内核
规范的相关规定添加了下述生成/删除内核对象的服务调用,并实现了将某块内存
空间交由内核负责分配的静态API DEF_KMM.动态创建机能扩展包位于
extension/dcre目录下.

但是对于内核的动态内存管理,目标非依赖部分所实现的内存管理模块仅能将可由
内核分配的内存空间从头到尾依次分配,并且回收的内存空间无法再被分配.因此,
如果想实现真正意义上的动态内存管理的话,须要在目标依赖部分上或 者说须要由
用户来实现相应的函数.关于这些函数的说明,详见<TOPPERS/ASP内核目标依赖部
分移植手册>的<6.15 动态内存管理>.

动态机能扩展包下的kernel.h中定义了宏TOPPERS_SUPPORT_DYNAMIC_CRE,用户可以
据此判断动态创建机能是否可用.

动态创建机能扩展包追加的服务调用如下.

	ER_ID tskid = acre_tsk(const T_CTSK *pk_ctsk)
	ER ercd = del_tsk(ID tskid)
	ER ercd = def_tex(ID tskid, const T_DTEX *pk_dtex)
	ER_ID semid = acre_sem(const T_CSEM *pk_csem)
	ER ercd = del_sem(ID semid)
	ER_ID flgid = acre_flg(const T_CFLG *pk_cflg)
	ER ercd = del_flg(ID flgid)
	ER_ID dtqid = acre_dtq(const T_CDTQ *pk_cdtq)
	ER ercd = del_dtq(ID dtqid)
	ER_ID pdqid = acre_pdq(const T_CPDQ *pk_cpdq)
	ER ercd = del_pdq(ID pdqid)
	ER_ID mbxid = acre_mbx(const T_CMBX *pk_cmbx)
	ER ercd = del_mbx(ID mbxid)
	ER_ID mpfid = acre_mpf(const T_CMPF *pk_cmpf)
	ER ercd = del_mpf(ID mpfid)
	ER_ID cycid = acre_cyc(const T_CCYC *pk_ccyc)
	ER ercd = del_cyc(ID cycid)
	ER_ID almid = acre_alm(const T_CALM *pk_calm)
	ER ercd = del_alm(ID almid)
	ER_ID isrid = acre_isr(const T_CISR *pk_cisr)
	ER ercd = del_isr(ID isrid)

----------------------------------------------------------------------
DEF_KMM		设定可由内核分配的内存空间(SD)

[静态API]
	DEF_KMM({ SIZE kmmsz, STK_T *kmm })

[参数]
　* 可由内核分配的内存空间信息
	SIZE		kmmsz		可由内核分配的内存空间的大小(字节数)
	STK_T		kmm			可由内核分配的内存空间的起始地址

[错误码]
	E_PAR			参数错误(istksz，istk不正确,其他引发该错误的条件请
                    参照下述机能说明.)
	E_OBJ			对象状态错误(可由内核分配的内存空间已经被设定过了)

[机能]

根据静态API DEF_KMM的参数所指定的信息,设定可由内核分配的内存空间. 

kmmsz为整数型常量,kmm为内存地址.

当kmm为NULL时,可由内核分配的内存空间的起始地址由配置器指定,其大小为
kmmsz.当kmmsz的值不符合目标依赖部分的定义基本单元的整数倍时,应向上舍入为
基本单元的整数倍.

如果由应用来预留可由内核分配的内存空间,则大小由kmmsz指定,起始地址由kmm指
定.

如果未使用 DEF_KMM来指定可由内核分配的内存空间,则系统也不会相应的预留内
存空间.

当kmm和kmmsz不满足目标依赖部分的要去时会报错,错误码为E_PAR.
----------------------------------------------------------------------


@ CPU异常处理函数的直接调用

一般而言应避免在CPU异常处理函数的出入口处理中再次发生CPU异常,但是有些目
标系统 不能完全排除发生这一情况的可能.对于这样的目标系统,用户通常希望不
经过CPU异常处理函 数的出入口处理而直接调用由应用实现的CPU异常处理函数.这
称之为CPU异常处理函数 的直接调用.

对于具有硬件向量表的处理器,仅修改目标依赖部分就可以实现CPU异常处理函数的
直接 调用,下面对此修改方法加以说明.

* TA_DIRECT属性的导入

为了能直接调用CPU异常处理函数,在CPU异常处理函数的属性中导入TA_DIRECT属
性.

* 目标依赖部分的修改处

target_kernel.h(或者其所包含的文件)中定义TA_DIRECT的值,为了使配置器能获
得该值,须在target_def.csv(或者其替代文件)中添加如下语句.

TA_DIRECT,TA_DIRECT

接着在target.tf(或者其下所包含的文件)中找到TARGET_EXCATR,并添加
TA_DIRECT.例如在的CPU异常处理函数没有其他目标依赖的属性时,则作如下设定

$TARGET_EXCATR = TA_DIRECT$

然后,利用OMIT_INITILIZE_EXCEPTION抑制生成CPU异常处理函数出入口处理的相
关记述和CPU异常处理函数初始化块的生成.同时把被抑制的部分复制到target.tf
中作如下修改.

对生成生成CPU异常处理函数出入口处理的记述(EXCHDR_ENTRY的list)的部分作如
下修改.

$FOREACH excno EXC.ORDER_LIST$
	$IF (EXC.EXCATR[excno] & TA_DIRECT) == 0$
		EXCHDR_ENTRY($EXC.EXCNO[excno]$, $+EXC.EXCNO[excno]$, $EXC.EXCHDR[excno]$)$NL$
	$END$
$END$

另外对生成CPU异常处理函数初始化块的部分作如下修改.

$IF LENGTH(EXC.ORDER_LIST)$
	const EXCINIB _kernel_excinib_table[TNUM_EXCNO] = {$NL$
	$JOINEACH excno EXC.ORDER_LIST ",\n"$
		$IF (EXC.EXCATR[excno] & TA_DIRECT) == 0$
			$TAB${ ($EXC.EXCNO[excno]$), ($EXC.EXCATR[excno]$), (FP)(EXC_ENTRY($EXC.EXCNO[excno]$, $EXC.EXCHDR[excno]$)) }
		$ELSE$
			$TAB${ ($EXC.EXCNO[excno]$), ($EXC.EXCATR[excno]$), (FP)($EXC.EXCHDR[excno]$) }
		$END$
	$END$$NL$
	};$NL$
$ELSE$
	TOPPERS_EMPTY_LABEL(const EXCINIB, _kernel_excinib_table);$NL$
$END$

完
