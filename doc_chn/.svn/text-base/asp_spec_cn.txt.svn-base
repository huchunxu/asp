
		TOPPERS/ASP内核的规范概要

		版本: Release 1.7
		最后更新: 2011年3月31日


本文档是TOPPERS/ASP内核的规范概要,以TOPPERS/ASP内核规范相对于μITRON4.0
规范标准机能集的扩展和变更处为中心对TOPPERS/ASP内核进行说明.由华中科技
大学瑞萨高级嵌入式控制器实验室组织翻译制作,主要参与人:任慰,王彦明,方华
启,汪卓

----------------------------------------------------------------------
 TOPPERS/ASP Kernel
     Toyohashi Open Platform for Embedded Real-Time Systems/
     Advanced Standard Profile Kernel

 Copyright (C) 2005-2011 by Embedded and Real-Time Systems Laboratory
             Graduate School of Information Science, Nagoya Univ., JAPAN
 
对于以上著作权,用户只要符合以下的(1)－(4)条件,或者符合Free Software
Foundation机构公布 的GNU General Public License第2版中记述的条件,著作权
所有者将无偿同意本软件(含本软件修正品,以下同)的使用,复制,修改及再分发(
以下统称为使用).

(1).以源代码形式使用本软件时,须原封不动地把著作权申明,使用条件及以下的无
	保障规定放入源代码中.

(2).以程序库等能被其它软件调用的形式再分发时,须在再分发说明书(使用说明等
	)中,写入 上述的著作权申明,使用条件及以下的无保障规定.

(3).把本软件嵌入机器等,以不能被其它软件调用的形式使用本软件时,须满足以下
	条件中的一条.
	(a).再分发时使用书(使用说明等)中,须写入上述著作权申明,使用条件及以下
	的无保障规定.
	(b).以其它形式再分发本软件时,须向TOPPERS协会报告. 

(4).因使用本软件而引起的直接或间接的损失,均不得向上述著作权所有者及
	TOPPERS协会要求承担责任.

本软件以无保障方式提供给社会.上述著作权所有者及TOPPERS协会对本软件及能
否使用本软件的 探讨均不负任何责任.同时,对因使用上述软件而引起的直接或间
接的损失,均不负任何责任.
 
 $Id: asp_spec.txt 2050 2011-04-03 02:37:44Z ertl-hiro $
----------------------------------------------------------------------

@ 前提文献

[1] TRON协会: μITRON4.0规范, Ver.4.02.00, 2004年.

[2] TRON协会: μITRON4.0规范 保护机能扩展(μITRON4.0/PX规范),
	Ver.1.00.00, 2002年.

[3] TOPPERS工程协会: TOPPERS/JSP内核 用户手册
	版本Release 1.4.3, 最后更新: 2007年4月23日.

@ 规范概述

TOPPERS/ASP内核的规范以μITRON4.0规范标准机能集为基础,做了如下扩展
和改善.

# ASP内核的中断处理机能遵循TOPPERS标准中断处理模型.
# 引入部分μITRON4.0规范标准机能集以外的机能.
# 部分规范在μITRON4.0规范之上作了一些变更.
# 实现并部分变更了JSP内核中所扩展的机能.
# 新实现ASP内核中所扩展的机能.
# 全面重新研究了系统配置处理.
# 支持针对扩展机能实现的扩展包.
# 引入了TOPPERS嵌入式组件系统(TECS).

因此ASP内核并非完全遵循μITRON4.0规范,也不完全向下兼容JSP内核.

在μITRON4.0规范中,独自实现的静态API和服务调用应在名称之前附加字符"V"或
者"v",但ASP内核不遵循这个规则.

以下是ASP内核相对于μITRON4.0规范标准机能集的扩展变更处的相关说明.

@ 引入部分标准机能集以外机能

ASP内核实现了以下在μITRON4.0规范中做了规定,但并不包含在标准机能集中(
即使包含也不限制)的机能

(1) 多个任务等待一个事件标志

实现了多个任务等待一个事件标志的机能(带TA_WMUL属性的事件标志).

因此,当事件标志被置位时(set_flg，iset_flg)可能唤醒多个处于等待状态的
任务,但这将延长内核中禁止中断的时间,使用时需要注意.

(2) 单次定时器

实现了单次定时器机能.单次定时器机能的静态API及服务调用如下.

	CRE_ALM		生成单次定时器(静态API)
	sta_alm		启动单次定时器
	ista_alm	启动单次定时器(非任务上下文用)
	stp_alm		关闭单次定时器
	istp_alm	关闭单次定时器(非任务上下文用)

(3) 中断服务例程

μITRON4.0规范标准机能集中只要求支持中断处理函数和中断服务例程任意一个
.JSP内核仅实现了对中断处理函数的支持,而ASP内核实现了对二者的支持.

ASP内核的中断服务例程规范遵循TOPPERS标准中断处理模型.作为追加中断
服务例程的服务调用,实现了下述静态API.该静态API的规范割遵循TOPPERS标准中
断处理模型,相对于μITRON4.0规范进行了扩展.

	ATT_ISR		追加中断服务例程(静态API)

(4) 中断管理机能

作为μITRON4.0规范标准机能集未包含的的中断管理机能,实现了如下服务调用
.JSP内核是否实现了这些服务调用取决于目标依赖部分.而ASP内核遵循TOPPERS标
准中断处理模型,在目标非依赖部分实现了这些服务调用.

	dis_int		禁止中断
	ena_int		允许中断
	chg_ipm		变更当前中断优先级屏蔽
	get_ipm		获取当前中断优先级屏蔽

(5) 内核对象状态参照机能

作为一个主要面向调试的机能,实现了内核对象状态参照机能,具体包括如下服务调
用.

	ref_tsk		参照任务状态
	ref_tex		参照任务异常处理状态
	ref_sem		参照信号量状态
	ref_flg		参照事件标志状态
	ref_dtq		参照数据队列状态
	ref_mbx		参照邮箱状态
	ref_mpf		参照固定长内存池状态
	ref_cyc		参照周期定时器状态
	ref_alm		参照单次定时器状态

@ 相对μITRON4.0规范的变更

(1) 修改了ITRON的标准数据类型

对于大小指定的整数类型的类型名(B, H, W等),将其变更为遵循C99标准(int8_t,
int16_t,int32_t等)或者与之兼容的类型名.但对于必须使用ITRON标准数据类型的
应用,准备了itron.h用以包含ITRON标准数据类型.

(2) 在非任务上下文环境下调用ext_tsk

当在非任务上下文环境下调用ext_tsk时, ext_tsk应返回错误E_CTX.这样ext_tsk
应为可返回函数,其返回值类型为ER.

(3) 可以在CPU异常处理中进行的操作

可以在CPU异常处理中进行的操作既非JSP内核规范的翻版也不遵循μITRON4.0规范
,而是按照TOPPERS标准中断处理模型实现了如下服务调用.

	xsns_dpn	获取CPU异常发生时的调度保留状态
	xsns_xpn	获取CPU异常发生时的任务异常处理保留状态

(4) 分离内核管理用区域

ASP内核采用了部分分离内核管理用内存区域相关规范.这些规范在μ
ITRON4.0/PX规范引入的,对μITRON4.0规范进行了变更.

首先在固定长内存池的实现上,随着内核管理用内存区域的分离,在固定长内存池
生成静态API(CRE_MPF)的参数中追加了指定固定长内存池管理区域起始地址的参
数(mpfmb).

与之相应地,将数据队列生成静态API(CRE_DTQ)的最后一个参数的名称变更为数据
队列管理区域起始地址(dtqmb).

另外,作为一个与μITRON4.0规范兼容的机能,对邮箱不进行内核用管理区域的分离
,因此生成邮箱的静态API(CRE_MBX)没有任何变更.

(5) 变更处理单位与内存空间数据类型

处理单位入口地址的准据类型不再使用无法反应处理单位类型的数据类型(FP型).
每种处理单位入口地址都有其专用的数据类型.比如,任务的入口地址的数据类型
为TASK型,任务异常处理例程的数据类型为TEXRTN型.

另外,堆栈与固定长内存池存储空间的数据类型分别为STK_T型和MPF_T型.

(6) 值为0的常量(内核对象属性等)的相关更改

为了防止编码错误,更改了值为0的常量的处理方法.对于内核对象属性(如TA_TFIFO
等),不再将0视作其默认值,并将内核对象属性的定义移到itron.h中.对于原本值
为0的服务调用的动作模式(TWF_ANDW),内核对象状态(TTEX_ENA等)等的值作了变
更.

(7) 废除嵌套强制等待请求

废除嵌套强制等待请求.换言之就是将强制等待请求的最大嵌套值固定为1.相对应
的,废除frsm_tsk,在itron.h中将frsm_tsk宏定义为rsm_tsk.并将TMAX_SUSCNT的
定义转移到itron.h中.

(8) 废除系统时间设置机能

废除了set_tim(设置系统时间).

(9) 变更周期定时器规范

更改了周期定时器在调用sta_cyc后的首次启动时间.在μITRON4.0规范中首次启
动是在调用sta_cyc后的一个周期,而ASP内核则是在调用sta_cyc后经过一个相位
时间后首次启动周定时器期.

(10) 变更任务异常处理例程的执行开始条件

开始条件变更为,只要没有处于中断优先级屏蔽全解除状态下,就不会开始执行任务
异常处理例程.

@ JSP内核中所扩展的机能

在ASP内核中实现了以下JSP内核中所扩展的机能.

(1) 性能评价用系统时间获取机能

所谓的性能评价用系统时间机能,就是为了测量ASP内核上运行的任务以及ASP内核
自身 的性能而获取系统时间的机能,时间单位为微秒.本机能涉及到的服务调用如
下(名称与JSP内核有所不同).

	get_utm		获取性能评价用系统时间

与JSP内核不同,get_utm可以在任意上下文中被调用.另外性能评价用系统时间的
数据类型(SYSUTM)在目标非依赖部分中定义为ulong_t.

(2) 结束处理例程机能

ASP内核支持注册结束处理例程,这些例程在系统关闭时被调用.该机能涉及到的静
态API如下.

	ATT_TER		追加结束处理例程(静态API)

(3) 获取内核运行状态

如果内核初始化完毕之前或者结束处理之后调用原本应由任务调用的函数则必须对
当前时刻内核是否允许服务调用进行判别.对应该机能的服务调用如下.(名称与JSP
内核有所不同).

	sns_ker		参照内核是否在非运行状态下

@ ASP内核所扩展的机能

(1) 中断请求线属性的设置

作为中断请求线属性的设置机能,按照标准TOPPERS中断处理模型的规定,实现了如
下静态API.

	CFG_INT		设置中断请求线的属性(静态API)

(2) 任务同步和通信内核对象的再初始化机能

该机能可以使任务同步和通信内核对象回到初始化状态,为此实现了如下服务调用.

	ini_sem		信号量的再初始化
	ini_flg		事件标志的再初始化
	ini_dtq		数据队列的再初始化
	ini_mbx		邮箱的再初始化
	ini_mpf		固定长内存池的再初始化

任务同步和通信内核对象再初始化时,将唤醒因相应任务同步和通信对象而进入等
待状态的任务, 并返回E_DLT.E_DLT不属于标准机能集的错误码.

因此,这些服务调用可能同时唤醒多个任务,内核中相应的中断禁止时间也会延长,
使用时请注意.

任务同步和通信内核对象再初始化时,应用层的整合性应由应用自身来保持.具体而
言,再初始化固定长内存池时,应确保应用不再使用已从该内存池中获得的内存块 .
再初始化邮箱对象时,应回收该邮箱中存在的消息的内存空间.

(3) 新增优先级数据队列机能

新增优先级数据队列机能,为此实现了如下静态API和服务调用.

	CRE_PDQ		生成优先级数据队列
	snd_pdq		向优先级数据队列发送消息
	psnd_pdq	向优先级数据队列发送消息(查询)
	ipsnd_pdq	向优先级数据队列发送消息(查询,非任务上下文)
	tsnd_pdq	向优先级数据队列发送消息(带超时)
	rcv_pdq		从优先级数据队列接收消息
	prcv_pdq	从优先级数据队列接收消息(查询)
	trcv_pdq	从优先级数据队列接收消息(带超时)
	ini_pdq		优先级数据队列再初始化
	ref_pdq		获取优先级数据队列状态

如向已有较多数据的优先级数据队列发送数据时,则相关服务调用(snd_pdq,
psnd_pdq, ipsnd_pdq, tsnd_pdq)的处理时间会延长,内核中相应中断禁止时间也
会延长,使用时请注意.

(4) 获取当前任务扩展信息

新增获取当前任务扩展信息的服务调用,该调用预想是在库中使用.

	get_inf		获取当前任务扩展信息

(5) 内核的结束

新增用以在出现致命错误时结束内核运行的服务调用.这一机能在μITRON4.0规范
中属于系统管理机能(JSP内核中也有名为kernel_exit 的服务调用,实质上也是对
该机能的实现).

	ext_ker		结束内核运行

虽然在ASP内核中,该调用不会返回,但对于具有保护机能的内核则可能会返回,返回
值类型为ER.

相应的,JSP内核的kernel_start更名为sta_ker.但不把sta_ker视作服务调用.

(6) 非任务上下文堆栈的设定

新增指定非任务上下文堆栈栈起始地址和大小的静态API.另外,在该静态API中也可
以仅指定非任务上下堆栈的大小.

	DEF_ICS		定义非任务上下文堆栈

@ 变更JSP内核实现定义/实现依赖的相关规定

对JSP内核中根据μITRON4.0规范由实现定义或者依赖于实现的相关规范,做如下变
更.

(1) 整理针对应用的头文件

应用需要调用内核时应包含kernel.h,需要调用SIL时应需包含头sil.h,废除
t_services.h和s_services.h.

另外,准备t_stddef.h,该头文件为kernel.h和sil.h的公共部分.当应用不调用内核
也不调用SIL时,只需包含t_stddef.h.如果需要与μITRON4.0规范兼容,包含头文件
itron.h.

(2) 变更中断处理/异常处理相关数据类型

在目标非依赖部分将中断号数据类型(INHNO),中断号数据类型(INTNO),CPU异常号
数据类型(EXCNO)统一定义为uint_t型.

(3) 规定处理单位开始执行/返回时的系统状态

关于处理单位开始执行/返回时的系统状态,对于μITRON4.0规范中依赖具体实现
的相关部分,ASP内核做了严格规定,不因目标硬件而异.

(4) 变更isig_tim处理

系统时间的更新在内核内部进行,废除服务调用isig_tim.

(5) 内核用内存区域的指定方法

JSP内核中内核用内存区域是自动分配的,而在ASP内核中可以在对应的静态API指定
自定义的任务堆栈和固定长内存池的的起始地址(也支持自动分配).

(6) 内核管理外中断的处理的规定

JSP内核中属于内核管理外的中断的处理是因目标硬件而定的,而ASP内核将这些内
核管理外的中断尽可能的按照TOPPERS标准中断处理模型将其标准化.但是否有除
NMI以外的内核管理外中断,内核管理外中断的最低优先级是多少则仍由目标硬件决
定.

@ 重新研究系统配置处理

全面重新研究了系统配置处理,变更了系统配置文件中C语言预处理语句的处理方法
和静态API参数的分类.

@ 扩展包的支持

由于ASP内核实现了一些扩展机能,所以支持如下机能扩展包.

# 互斥机能扩展包(不支持优先级继承)
# 任务运行超时处理函数机能扩展包
# 任务优先级扩展包
# 受限任务扩展包
# 动态创建机能扩展包

@ 导入TOPPERS嵌入式组件系统(TECS)

继串行接口设备驱动和系统日志之后,导入了TOPPERS嵌入式组件(TECS).另外将内
核对象也作为TECS 的组件.

另外到Release 1.7为止,ASP内核对应TECS的修正位于TECS的发布包中,而ASP内核
的发布包中无此内容.

完
